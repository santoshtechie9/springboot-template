package com.example.websocket;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.boot.context.event.ApplicationReadyEvent;

import java.net.URI;

@Component
public class BinanceWebSocketClient implements WebSocketHandler {

    private static final String BINANCE_WS_URL = "wss://stream.binance.com:9443/ws/btcusdt@trade";

    @EventListener(ApplicationReadyEvent.class)
    public void connectToBinance() {
        StandardWebSocketClient client = new StandardWebSocketClient();
        System.out.println("üöÄ Connecting to Binance WebSocket...");

        client.doHandshake(this, URI.create(BINANCE_WS_URL)).addCallback(
            session -> {
                System.out.println("‚úÖ Connected to Binance WebSocket!");
            },
            error -> {
                System.err.println("‚ö†Ô∏è WebSocket connection failed: " + error.getMessage());
            }
        );
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        System.out.println("‚úÖ Connection established with Binance!");
        try {
            String subscribeMessage = "{\"method\": \"SUBSCRIBE\", \"params\": [\"btcusdt@trade\"], \"id\": 1}";
            session.sendMessage(new TextMessage(subscribeMessage));
            System.out.println("üì® Subscription message sent: " + subscribeMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) {
        System.out.println("üì© Received message: " + message.getPayload().toString());
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) {
        System.err.println("‚ö†Ô∏è WebSocket Transport Error: " + exception.getMessage());
        exception.printStackTrace();
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        System.out.println("‚ùå WebSocket closed: " + status);
    }

    @Override
    public boolean supportsPartialMessages() {
        return true;
    }
}
