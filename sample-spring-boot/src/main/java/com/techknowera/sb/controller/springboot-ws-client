package com.example.websocket;

import org.springframework.stereotype.Service;
import org.springframework.web.socket.*;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import jakarta.annotation.PostConstruct;

import java.net.URI;

@Service
public class BinanceWebSocketClient implements WebSocketHandler {

    private static final String BINANCE_WS_URL = "wss://stream.binance.com:9443/ws/btcusdt@trade";
    private WebSocketSession session;

    @PostConstruct
    public void connectToBinance() {
        StandardWebSocketClient client = new StandardWebSocketClient();
        try {
            System.out.println("üöÄ Connecting to Binance WebSocket...");
            client.doHandshake(this, URI.create(BINANCE_WS_URL));
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è WebSocket connection failed: " + e.getMessage());
        }
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        this.session = session;
        System.out.println("‚úÖ Connected to Binance WebSocket!");
    }

    @Override
    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) {
        System.out.println("üì© Received: " + message.getPayload());
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) {
        System.err.println("‚ö†Ô∏è WebSocket Error: " + exception.getMessage());
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        System.out.println("‚ùå WebSocket closed: " + status);
    }

    @Override
    public boolean supportsPartialMessages() {
        return false;
    }
}
