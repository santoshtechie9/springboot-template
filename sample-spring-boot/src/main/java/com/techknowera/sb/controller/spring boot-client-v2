package com.example.websocket;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.boot.context.event.ApplicationReadyEvent;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;

@Component
public class BinanceWebSocketClient implements WebSocketHandler {

    private static final String BINANCE_WS_URL = "wss://stream.binance.com:9443/ws/btcusdt@trade";
    private WebSocketSession session;

    @EventListener(ApplicationReadyEvent.class)
    public void connectToBinance() {
        StandardWebSocketClient client = new StandardWebSocketClient();
        System.out.println("üöÄ Connecting to Binance WebSocket...");

        CompletableFuture<WebSocketSession> futureSession = CompletableFuture.supplyAsync(() -> {
            try {
                return client.doHandshake(this, URI.create(BINANCE_WS_URL)).get();
            } catch (Exception e) {
                throw new RuntimeException("‚ö†Ô∏è WebSocket connection failed: " + e.getMessage(), e);
            }
        });

        futureSession.thenAccept(s -> {
            System.out.println("‚úÖ Connected to Binance WebSocket!");
            this.session = s;
            sendSubscriptionMessage();
        }).exceptionally(error -> {
            System.err.println("‚ö†Ô∏è WebSocket connection failed: " + error.getMessage());
            return null;
        });
    }

    private void sendSubscriptionMessage() {
        if (session != null && session.isOpen()) {
            try {
                String subscriptionMessage = "{ \"method\": \"SUBSCRIBE\", \"params\": [\"btcusdt@trade\"], \"id\": 1 }";
                session.sendMessage(new TextMessage(subscriptionMessage));
                System.out.println("üì° Subscription message sent!");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Failed to send subscription: " + e.getMessage());
            }
        }
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        System.out.println("‚úÖ WebSocket connection established!");
        this.session = session;
        sendSubscriptionMessage();
    }

    @Override
    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) {
        System.out.println("üì© Received message: " + message.getPayload());
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) {
        System.err.println("‚ö†Ô∏è WebSocket Error: " + exception.getMessage());
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        System.out.println("‚ùå WebSocket closed: " + status);
    }

    @Override
    public boolean supportsPartialMessages() {
        return false;
    }
}

